### YamlMime:ManagedReference
items:
- uid: Common.Subject.Types.TypeivBusinessmanType
  commentId: T:Common.Subject.Types.TypeivBusinessmanType
  id: TypeivBusinessmanType
  parent: Common.Subject.Types
  children:
  - Common.Subject.Types.TypeivBusinessmanType.BirthDate
  - Common.Subject.Types.TypeivBusinessmanType.BirthPlace
  - Common.Subject.Types.TypeivBusinessmanType.Citizenship
  - Common.Subject.Types.TypeivBusinessmanType.Email
  - Common.Subject.Types.TypeivBusinessmanType.Inn
  - Common.Subject.Types.TypeivBusinessmanType.Name
  - Common.Subject.Types.TypeivBusinessmanType.Ogrnip
  - Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
  - Common.Subject.Types.TypeivBusinessmanType.Phone
  - Common.Subject.Types.TypeivBusinessmanType.Snils
  langs:
  - csharp
  - vb
  name: TypeivBusinessmanType
  nameWithType: TypeivBusinessmanType
  fullName: Common.Subject.Types.TypeivBusinessmanType
  type: Class
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: TypeivBusinessmanType
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1910
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: <p>Сведения об индивидуальном предпринимателе</p>
  example: []
  syntax:
    content: >-
      [Serializable]

      public class TypeivBusinessmanType
    content.vb: >-
      <Serializable>

      Public Class TypeivBusinessmanType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Name
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Name
  id: Name
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: TypeivBusinessmanType.Name
  fullName: Common.Subject.Types.TypeivBusinessmanType.Name
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Name
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1922
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: <p>Фамилия, имя, отчество (при наличии)</p>
  example: []
  syntax:
    content: >-
      [Required]

      public PersonNameType Name { get; set; }
    parameters: []
    return:
      type: Common.Complex.Types.PersonNameType
    content.vb: >-
      <Required>

      Public Property Name As PersonNameType
  overload: Common.Subject.Types.TypeivBusinessmanType.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.BirthDate
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.BirthDate
  id: BirthDate
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: BirthDate
  nameWithType: TypeivBusinessmanType.BirthDate
  fullName: Common.Subject.Types.TypeivBusinessmanType.BirthDate
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: BirthDate
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1933
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>Дата рождения</p>

    <p>Тип Дата в формате ГГГГ-ММ-ДД (2100-01-01 - 1900-01-01)</p>

    <p>Minimum inclusive value: 1900-01-01.</p>

    <p>Maximum inclusive value: 2100-01-01.</p>
  example: []
  syntax:
    content: >-
      [Range(typeof(DateTime), "1900-01-01", "2100-01-01")]

      [Required]

      public DateTime BirthDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <Range(GetType(Date), "1900-01-01", "2100-01-01")>

      <Required>

      Public Property BirthDate As Date
  overload: Common.Subject.Types.TypeivBusinessmanType.BirthDate*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RangeAttribute
    ctor: System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)
    arguments:
    - type: System.Type
      value: System.DateTime
    - type: System.String
      value: 1900-01-01
    - type: System.String
      value: 2100-01-01
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.BirthPlace
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.BirthPlace
  id: BirthPlace
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: BirthPlace
  nameWithType: TypeivBusinessmanType.BirthPlace
  fullName: Common.Subject.Types.TypeivBusinessmanType.BirthPlace
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: BirthPlace
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1945
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>Место рождения</p>

    <p>Тип Строка длиной от 1 до 255 символов</p>

    <p>Minimum length: 1.</p>

    <p>Maximum length: 255.</p>
  example: []
  syntax:
    content: >-
      [MinLength(1)]

      [MaxLength(255)]

      [Required]

      public string BirthPlace { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MinLength(1)>

      <MaxLength(255)>

      <Required>

      Public Property BirthPlace As String
  overload: Common.Subject.Types.TypeivBusinessmanType.BirthPlace*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 255
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Citizenship
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Citizenship
  id: Citizenship
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Citizenship
  nameWithType: TypeivBusinessmanType.Citizenship
  fullName: Common.Subject.Types.TypeivBusinessmanType.Citizenship
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Citizenship
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1955
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: <p>Гражданство</p>
  example: []
  syntax:
    content: >-
      [Required]

      public CountryKindEType Citizenship { get; set; }
    parameters: []
    return:
      type: Common.Enums.Country.Types.CountryKindEType
    content.vb: >-
      <Required>

      Public Property Citizenship As CountryKindEType
  overload: Common.Subject.Types.TypeivBusinessmanType.Citizenship*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Snils
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Snils
  id: Snils
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Snils
  nameWithType: TypeivBusinessmanType.Snils
  fullName: Common.Subject.Types.TypeivBusinessmanType.Snils
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Snils
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1967
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>СНИЛС</p>

    <p>Тип СНИЛС физического лица</p>

    <p>Minimum length: 11.</p>

    <p>Maximum length: 11.</p>

    <p>Pattern: [0-9]{11}.</p>
  example: []
  syntax:
    content: >-
      [MinLength(11)]

      [MaxLength(11)]

      [RegularExpression("[0-9]{11}")]

      public string Snils { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MinLength(11)>

      <MaxLength(11)>

      <RegularExpression("[0-9]{11}")>

      Public Property Snils As String
  overload: Common.Subject.Types.TypeivBusinessmanType.Snils*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 11
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 11
  - type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute
    ctor: System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '[0-9]{11}'
- uid: Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
  id: PersonDocumentIdentity
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: PersonDocumentIdentity
  nameWithType: TypeivBusinessmanType.PersonDocumentIdentity
  fullName: Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: PersonDocumentIdentity
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1977
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: <p>Документ, удостоверяющий личность</p>
  example: []
  syntax:
    content: >-
      [Required]

      public PersonDocumentIdentityType PersonDocumentIdentity { get; set; }
    parameters: []
    return:
      type: Common.Document.Types.PersonDocumentIdentityType
    content.vb: >-
      <Required>

      Public Property PersonDocumentIdentity As PersonDocumentIdentityType
  overload: Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Inn
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Inn
  id: Inn
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Inn
  nameWithType: TypeivBusinessmanType.Inn
  fullName: Common.Subject.Types.TypeivBusinessmanType.Inn
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Inn
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 1989
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>ИНН</p>

    <p>Тип ИНН физического лица</p>

    <p>Minimum length: 12.</p>

    <p>Maximum length: 12.</p>

    <p>Pattern: ([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}.</p>
  example: []
  syntax:
    content: >-
      [MinLength(12)]

      [MaxLength(12)]

      [RegularExpression("([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}")]

      [Required]

      public string Inn { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MinLength(12)>

      <MaxLength(12)>

      <RegularExpression("([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}")>

      <Required>

      Public Property Inn As String
  overload: Common.Subject.Types.TypeivBusinessmanType.Inn*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 12
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 12
  - type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute
    ctor: System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{10}
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Ogrnip
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Ogrnip
  id: Ogrnip
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Ogrnip
  nameWithType: TypeivBusinessmanType.Ogrnip
  fullName: Common.Subject.Types.TypeivBusinessmanType.Ogrnip
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Ogrnip
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 2004
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>ОГРНИП</p>

    <p>Тип ОГРН индивидуального предпринимателя</p>

    <p>Minimum length: 15.</p>

    <p>Maximum length: 15.</p>

    <p>Pattern: [0-9]{15}.</p>
  example: []
  syntax:
    content: >-
      [MinLength(15)]

      [MaxLength(15)]

      [RegularExpression("[0-9]{15}")]

      [Required]

      public string Ogrnip { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MinLength(15)>

      <MaxLength(15)>

      <RegularExpression("[0-9]{15}")>

      <Required>

      Public Property Ogrnip As String
  overload: Common.Subject.Types.TypeivBusinessmanType.Ogrnip*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 15
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 15
  - type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute
    ctor: System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '[0-9]{15}'
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
- uid: Common.Subject.Types.TypeivBusinessmanType.Email
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Email
  id: Email
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Email
  nameWithType: TypeivBusinessmanType.Email
  fullName: Common.Subject.Types.TypeivBusinessmanType.Email
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Email
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 2019
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: >-
    <p>Адрес электронной почты</p>

    <p>Тип Адрес электронной почты</p>

    <p>Minimum length: 1.</p>

    <p>Maximum length: 60.</p>

    <p>Pattern: \c+@\c+\.\c+.</p>
  example: []
  syntax:
    content: >-
      [MinLength(1)]

      [MaxLength(60)]

      [RegularExpression("\\c+@\\c+\\.\\c+")]

      public string Email { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MinLength(1)>

      <MaxLength(60)>

      <RegularExpression("\c+@\c+\.\c+")>

      Public Property Email As String
  overload: Common.Subject.Types.TypeivBusinessmanType.Email*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MinLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 60
  - type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute
    ctor: System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '\c+@\c+\.\c+'
- uid: Common.Subject.Types.TypeivBusinessmanType.Phone
  commentId: P:Common.Subject.Types.TypeivBusinessmanType.Phone
  id: Phone
  parent: Common.Subject.Types.TypeivBusinessmanType
  langs:
  - csharp
  - vb
  name: Phone
  nameWithType: TypeivBusinessmanType.Phone
  fullName: Common.Subject.Types.TypeivBusinessmanType.Phone
  type: Property
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
      branch: 337a82da41b4970cdcc7638dddfb6599823eb029
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: Phone
    path: ../../ParmaTest/platforms/wpf/modules/ParmaGIS.WPF.Modules.ReportTool/Test2/Common.Subject.Types.cs
    startLine: 2029
  assemblies:
  - ParmaGIS.WPF.Modules.ReportTool
  namespace: Common.Subject.Types
  summary: <p>Телефон</p>
  example: []
  syntax:
    content: public string Phone { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Phone As String
  overload: Common.Subject.Types.TypeivBusinessmanType.Phone*
references:
- uid: Common.Subject.Types
  commentId: N:Common.Subject.Types
  href: Common.html
  name: Common.Subject.Types
  nameWithType: Common.Subject.Types
  fullName: Common.Subject.Types
  spec.csharp:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Subject
    name: Subject
    href: Common.Subject.html
  - name: .
  - uid: Common.Subject.Types
    name: Types
    href: Common.Subject.Types.html
  spec.vb:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Subject
    name: Subject
    href: Common.Subject.html
  - name: .
  - uid: Common.Subject.Types
    name: Types
    href: Common.Subject.Types.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Common.Subject.Types.TypeivBusinessmanType.Name*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Name
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Name
  name: Name
  nameWithType: TypeivBusinessmanType.Name
  fullName: Common.Subject.Types.TypeivBusinessmanType.Name
- uid: Common.Complex.Types.PersonNameType
  commentId: T:Common.Complex.Types.PersonNameType
  parent: Common.Complex.Types
  href: Common.Complex.Types.PersonNameType.html
  name: PersonNameType
  nameWithType: PersonNameType
  fullName: Common.Complex.Types.PersonNameType
- uid: Common.Complex.Types
  commentId: N:Common.Complex.Types
  href: Common.html
  name: Common.Complex.Types
  nameWithType: Common.Complex.Types
  fullName: Common.Complex.Types
  spec.csharp:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Complex
    name: Complex
    href: Common.Complex.html
  - name: .
  - uid: Common.Complex.Types
    name: Types
    href: Common.Complex.Types.html
  spec.vb:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Complex
    name: Complex
    href: Common.Complex.html
  - name: .
  - uid: Common.Complex.Types
    name: Types
    href: Common.Complex.Types.html
- uid: Common.Subject.Types.TypeivBusinessmanType.BirthDate*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.BirthDate
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_BirthDate
  name: BirthDate
  nameWithType: TypeivBusinessmanType.BirthDate
  fullName: Common.Subject.Types.TypeivBusinessmanType.BirthDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: Common.Subject.Types.TypeivBusinessmanType.BirthPlace*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.BirthPlace
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_BirthPlace
  name: BirthPlace
  nameWithType: TypeivBusinessmanType.BirthPlace
  fullName: Common.Subject.Types.TypeivBusinessmanType.BirthPlace
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Common.Subject.Types.TypeivBusinessmanType.Citizenship*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Citizenship
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Citizenship
  name: Citizenship
  nameWithType: TypeivBusinessmanType.Citizenship
  fullName: Common.Subject.Types.TypeivBusinessmanType.Citizenship
- uid: Common.Enums.Country.Types.CountryKindEType
  commentId: T:Common.Enums.Country.Types.CountryKindEType
  parent: Common.Enums.Country.Types
  href: Common.Enums.Country.Types.CountryKindEType.html
  name: CountryKindEType
  nameWithType: CountryKindEType
  fullName: Common.Enums.Country.Types.CountryKindEType
- uid: Common.Enums.Country.Types
  commentId: N:Common.Enums.Country.Types
  href: Common.html
  name: Common.Enums.Country.Types
  nameWithType: Common.Enums.Country.Types
  fullName: Common.Enums.Country.Types
  spec.csharp:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Enums
    name: Enums
    href: Common.Enums.html
  - name: .
  - uid: Common.Enums.Country
    name: Country
    href: Common.Enums.Country.html
  - name: .
  - uid: Common.Enums.Country.Types
    name: Types
    href: Common.Enums.Country.Types.html
  spec.vb:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Enums
    name: Enums
    href: Common.Enums.html
  - name: .
  - uid: Common.Enums.Country
    name: Country
    href: Common.Enums.Country.html
  - name: .
  - uid: Common.Enums.Country.Types
    name: Types
    href: Common.Enums.Country.Types.html
- uid: Common.Subject.Types.TypeivBusinessmanType.Snils*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Snils
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Snils
  name: Snils
  nameWithType: TypeivBusinessmanType.Snils
  fullName: Common.Subject.Types.TypeivBusinessmanType.Snils
- uid: Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_PersonDocumentIdentity
  name: PersonDocumentIdentity
  nameWithType: TypeivBusinessmanType.PersonDocumentIdentity
  fullName: Common.Subject.Types.TypeivBusinessmanType.PersonDocumentIdentity
- uid: Common.Document.Types.PersonDocumentIdentityType
  commentId: T:Common.Document.Types.PersonDocumentIdentityType
  parent: Common.Document.Types
  href: Common.Document.Types.PersonDocumentIdentityType.html
  name: PersonDocumentIdentityType
  nameWithType: PersonDocumentIdentityType
  fullName: Common.Document.Types.PersonDocumentIdentityType
- uid: Common.Document.Types
  commentId: N:Common.Document.Types
  href: Common.html
  name: Common.Document.Types
  nameWithType: Common.Document.Types
  fullName: Common.Document.Types
  spec.csharp:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Document
    name: Document
    href: Common.Document.html
  - name: .
  - uid: Common.Document.Types
    name: Types
    href: Common.Document.Types.html
  spec.vb:
  - uid: Common
    name: Common
    href: Common.html
  - name: .
  - uid: Common.Document
    name: Document
    href: Common.Document.html
  - name: .
  - uid: Common.Document.Types
    name: Types
    href: Common.Document.Types.html
- uid: Common.Subject.Types.TypeivBusinessmanType.Inn*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Inn
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Inn
  name: Inn
  nameWithType: TypeivBusinessmanType.Inn
  fullName: Common.Subject.Types.TypeivBusinessmanType.Inn
- uid: Common.Subject.Types.TypeivBusinessmanType.Ogrnip*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Ogrnip
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Ogrnip
  name: Ogrnip
  nameWithType: TypeivBusinessmanType.Ogrnip
  fullName: Common.Subject.Types.TypeivBusinessmanType.Ogrnip
- uid: Common.Subject.Types.TypeivBusinessmanType.Email*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Email
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Email
  name: Email
  nameWithType: TypeivBusinessmanType.Email
  fullName: Common.Subject.Types.TypeivBusinessmanType.Email
- uid: Common.Subject.Types.TypeivBusinessmanType.Phone*
  commentId: Overload:Common.Subject.Types.TypeivBusinessmanType.Phone
  href: Common.Subject.Types.TypeivBusinessmanType.html#Common_Subject_Types_TypeivBusinessmanType_Phone
  name: Phone
  nameWithType: TypeivBusinessmanType.Phone
  fullName: Common.Subject.Types.TypeivBusinessmanType.Phone
