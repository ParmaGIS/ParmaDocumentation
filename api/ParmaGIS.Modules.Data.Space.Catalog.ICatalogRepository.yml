### YamlMime:ManagedReference
items:
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  commentId: T:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  id: ICatalogRepository
  parent: ParmaGIS.Modules.Data.Space.Catalog
  children:
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(System.String,System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync``1(System.String)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog,System.Object)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(System.Type,System.Object)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync``1(System.Object)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync(System.Threading.CancellationToken)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync
  langs:
  - csharp
  - vb
  name: ICatalogRepository
  nameWithType: ICatalogRepository
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  type: Interface
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ICatalogRepository
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 10
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: >-
    Представляет контракт взаимодействия с репозиторием каталогов.

    Каталоги представляют из себя сущности, которые редко редактируются.
  example: []
  syntax:
    content: public interface ICatalogRepository
    content.vb: Public Interface ICatalogRepository
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync(System.Threading.CancellationToken)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync(System.Threading.CancellationToken)
  id: GetCatalogsAsync(System.Threading.CancellationToken)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogsAsync(CancellationToken)
  nameWithType: ICatalogRepository.GetCatalogsAsync(CancellationToken)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 17
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает все каталоги репозитория.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalog[]>> GetCatalogsAsync(CancellationToken token = default)
    parameters:
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog[]}}
      description: Массив каталогов.
    content.vb: Function GetCatalogsAsync(token As CancellationToken = Nothing) As Task(Of RepoResponse(Of ICatalog()))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  id: GetCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogAsync(ICatalogItem)
  nameWithType: ICatalogRepository.GetCatalogAsync(ICatalogItem)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 24
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает каталог по его элементу.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalog?>> GetCatalogAsync(ICatalogItem catalogItem)
    parameters:
    - id: catalogItem
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
      description: Элемент каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
      description: Каталог, которому принадлежит элемент.
    content.vb: Function GetCatalogAsync(catalogItem As ICatalogItem) As Task(Of RepoResponse(Of ICatalog))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync``1
  id: GetCatalogAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogAsync<TItem>()
  nameWithType: ICatalogRepository.GetCatalogAsync<TItem>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync<TItem>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 31
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает каталог по типу элемента.
  example: []
  syntax:
    content: 'Task<RepoResponse<ICatalog?>> GetCatalogAsync<TItem>() where TItem : class, ICatalogItem'
    typeParameters:
    - id: TItem
      description: Тип элемента каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
      description: Каталог, которому принадлежат элементы указанного типа.
    content.vb: Function GetCatalogAsync(Of TItem As {Class, ICatalogItem})() As Task(Of RepoResponse(Of ICatalog))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync*
  nameWithType.vb: ICatalogRepository.GetCatalogAsync(Of TItem)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(Of TItem)()
  name.vb: GetCatalogAsync(Of TItem)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(System.Type)
  id: GetCatalogAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogAsync(Type)
  nameWithType: ICatalogRepository.GetCatalogAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 38
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает каталог по типу его элементов.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalog?>> GetCatalogAsync(Type itemType)
    parameters:
    - id: itemType
      type: System.Type
      description: Тип элемента каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
      description: Каталог, которому принадлежат элементы указанного типа.
    content.vb: Function GetCatalogAsync(itemType As Type) As Task(Of RepoResponse(Of ICatalog))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync``1(System.Object)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync``1(System.Object)
  id: GetCatalogItemAsync``1(System.Object)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync<T>(object)
  nameWithType: ICatalogRepository.GetCatalogItemAsync<T>(object)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync<T>(object)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 46
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает элемент каталога по его типу и уникальному идентификатору.
  example: []
  syntax:
    content: 'Task<RepoResponse<T?>> GetCatalogItemAsync<T>(object id) where T : class, ICatalogItem'
    parameters:
    - id: id
      type: System.Object
      description: Уникальный идентификатор элемента.
    typeParameters:
    - id: T
      description: Тип элемента каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{{T}}}
      description: Элемент каталога.
    content.vb: Function GetCatalogItemAsync(Of T As {Class, ICatalogItem})(id As Object) As Task(Of RepoResponse(Of T))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync*
  nameWithType.vb: ICatalogRepository.GetCatalogItemAsync(Of T)(Object)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(Of T)(Object)
  name.vb: GetCatalogItemAsync(Of T)(Object)
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(System.Type,System.Object)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(System.Type,System.Object)
  id: GetCatalogItemAsync(System.Type,System.Object)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync(Type, object)
  nameWithType: ICatalogRepository.GetCatalogItemAsync(Type, object)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(System.Type, object)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 54
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвраает элемент каталога по его типу и уникальному идентификатору.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem?>> GetCatalogItemAsync(Type itemType, object id)
    parameters:
    - id: itemType
      type: System.Type
      description: Тип элемента каталога.
    - id: id
      type: System.Object
      description: Уникальный идентификатор эелмента.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
      description: Элемент каталога.
    content.vb: Function GetCatalogItemAsync(itemType As Type, id As Object) As Task(Of RepoResponse(Of ICatalogItem))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync*
  nameWithType.vb: ICatalogRepository.GetCatalogItemAsync(Type, Object)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(System.Type, Object)
  name.vb: GetCatalogItemAsync(Type, Object)
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog,System.Object)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog,System.Object)
  id: GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog,System.Object)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync(ICatalog, object)
  nameWithType: ICatalogRepository.GetCatalogItemAsync(ICatalog, object)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog, object)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 62
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает элемент каталога по каталогу и уникальному идентификатору.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem?>> GetCatalogItemAsync(ICatalog catalog, object id)
    parameters:
    - id: catalog
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
      description: Каталог, которому принадлежит элемент.
    - id: id
      type: System.Object
      description: Уникальный идентификатор.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
      description: Элеметн каталога.
    content.vb: Function GetCatalogItemAsync(catalog As ICatalog, id As Object) As Task(Of RepoResponse(Of ICatalogItem))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync*
  nameWithType.vb: ICatalogRepository.GetCatalogItemAsync(ICatalog, Object)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog, Object)
  name.vb: GetCatalogItemAsync(ICatalog, Object)
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync``1
  id: GetCatalogItemsAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync<T>()
  nameWithType: ICatalogRepository.GetCatalogItemsAsync<T>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync<T>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 69
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает элементы каталога указанного типа.
  example: []
  syntax:
    content: 'Task<RepoResponse<T[]>> GetCatalogItemsAsync<T>() where T : class, ICatalogItem'
    typeParameters:
    - id: T
      description: Тип элементов каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{{T}[]}}
      description: Массив элементов каталога.
    content.vb: Function GetCatalogItemsAsync(Of T As {Class, ICatalogItem})() As Task(Of RepoResponse(Of T()))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync*
  nameWithType.vb: ICatalogRepository.GetCatalogItemsAsync(Of T)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(Of T)()
  name.vb: GetCatalogItemsAsync(Of T)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(System.Type)
  id: GetCatalogItemsAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync(Type)
  nameWithType: ICatalogRepository.GetCatalogItemsAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 76
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает элементы каталога указанного типа.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem[]>> GetCatalogItemsAsync(Type itemType)
    parameters:
    - id: itemType
      type: System.Type
      description: Тип элементов каталога
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem[]}}
      description: Массив элементов каталога.
    content.vb: Function GetCatalogItemsAsync(itemType As Type) As Task(Of RepoResponse(Of ICatalogItem()))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  id: GetCatalogItemsAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync(ICatalog)
  nameWithType: ICatalogRepository.GetCatalogItemsAsync(ICatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 83
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Возвращает элементы каталога.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem[]>> GetCatalogItemsAsync(ICatalog catalog)
    parameters:
    - id: catalog
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
      description: Каталог.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem[]}}
      description: Массив элементов каталога.
    content.vb: Function GetCatalogItemsAsync(catalog As ICatalog) As Task(Of RepoResponse(Of ICatalogItem()))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  id: InsertCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: InsertCatalogAsync(ICatalog)
  nameWithType: ICatalogRepository.InsertCatalogAsync(ICatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: InsertCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 90
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Добавляет каталог в репозиторий.
  example: []
  syntax:
    content: Task<RepoResponse> InsertCatalogAsync(ICatalog catalog)
    parameters:
    - id: catalog
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
      description: Добавляемый каталог.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
      description: ''
    content.vb: Function InsertCatalogAsync(catalog As ICatalog) As Task(Of RepoResponse)
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  id: RemoveCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: RemoveCatalogAsync(ICatalog)
  nameWithType: ICatalogRepository.RemoveCatalogAsync(ICatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 97
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Удаляет каталог из репозитория.
  example: []
  syntax:
    content: Task<RepoResponse> RemoveCatalogAsync(ICatalog catalog)
    parameters:
    - id: catalog
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
      description: Удаляемый каталог.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
      description: ''
    content.vb: Function RemoveCatalogAsync(catalog As ICatalog) As Task(Of RepoResponse)
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(System.String,System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(System.String,System.Type)
  id: CreateCatalogAsync(System.String,System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: CreateCatalogAsync(string, Type)
  nameWithType: ICatalogRepository.CreateCatalogAsync(string, Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(string, System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 105
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Создает каталог.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalog>> CreateCatalogAsync(string name, Type itemType)
    parameters:
    - id: name
      type: System.String
      description: Название каталога.
    - id: itemType
      type: System.Type
      description: Тип элементов.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
      description: Созданный каталог.
    content.vb: Function CreateCatalogAsync(name As String, itemType As Type) As Task(Of RepoResponse(Of ICatalog))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync*
  nameWithType.vb: ICatalogRepository.CreateCatalogAsync(String, Type)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(String, System.Type)
  name.vb: CreateCatalogAsync(String, Type)
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync``1(System.String)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync``1(System.String)
  id: CreateCatalogAsync``1(System.String)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: CreateCatalogAsync<T>(string)
  nameWithType: ICatalogRepository.CreateCatalogAsync<T>(string)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync<T>(string)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 113
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Создает каталог.
  example: []
  syntax:
    content: 'Task<RepoResponse<ICatalog>> CreateCatalogAsync<T>(string name) where T : class, ICatalogItem'
    parameters:
    - id: name
      type: System.String
      description: Название каталога.
    typeParameters:
    - id: T
      description: Тип каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
      description: Созданный каталог.
    content.vb: Function CreateCatalogAsync(Of T As {Class, ICatalogItem})(name As String) As Task(Of RepoResponse(Of ICatalog))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync*
  nameWithType.vb: ICatalogRepository.CreateCatalogAsync(Of T)(String)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync(Of T)(String)
  name.vb: CreateCatalogAsync(Of T)(String)
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  id: InsertCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: InsertCatalogItemAsync(ICatalogItem)
  nameWithType: ICatalogRepository.InsertCatalogItemAsync(ICatalogItem)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: InsertCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 120
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Добавлеяет элeмент каталога в репозиторий.
  example: []
  syntax:
    content: Task<RepoResponse> InsertCatalogItemAsync(ICatalogItem catalogItem)
    parameters:
    - id: catalogItem
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
      description: Элемент каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
      description: ''
    content.vb: Function InsertCatalogItemAsync(catalogItem As ICatalogItem) As Task(Of RepoResponse)
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  id: RemoveCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: RemoveCatalogItemAsync(ICatalogItem)
  nameWithType: ICatalogRepository.RemoveCatalogItemAsync(ICatalogItem)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 127
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Удаляет элемент каталога.
  example: []
  syntax:
    content: Task<RepoResponse> RemoveCatalogItemAsync(ICatalogItem catalogItem)
    parameters:
    - id: catalogItem
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
      description: Удаляемый элемент каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
      description: ''
    content.vb: Function RemoveCatalogItemAsync(catalogItem As ICatalogItem) As Task(Of RepoResponse)
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync``1
  id: CreateCatalogItemAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync<T>()
  nameWithType: ICatalogRepository.CreateCatalogItemAsync<T>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync<T>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 134
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Создает элемент каталога.
  example: []
  syntax:
    content: 'Task<RepoResponse<T>> CreateCatalogItemAsync<T>() where T : class, ICatalogItem'
    typeParameters:
    - id: T
      description: Тип элемента каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{{T}}}
      description: Созданный элемент каталога.
    content.vb: Function CreateCatalogItemAsync(Of T As {Class, ICatalogItem})() As Task(Of RepoResponse(Of T))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync*
  nameWithType.vb: ICatalogRepository.CreateCatalogItemAsync(Of T)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(Of T)()
  name.vb: CreateCatalogItemAsync(Of T)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  id: CreateCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync(ICatalog)
  nameWithType: ICatalogRepository.CreateCatalogItemAsync(ICatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(ParmaGIS.Modules.Data.Space.Catalog.ICatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 141
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Создает элемент каталога.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem>> CreateCatalogItemAsync(ICatalog catalog)
    parameters:
    - id: catalog
      type: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
      description: Каталог.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
      description: Созданный элемент каталога
    content.vb: Function CreateCatalogItemAsync(catalog As ICatalog) As Task(Of RepoResponse(Of ICatalogItem))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(System.Type)
  id: CreateCatalogItemAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync(Type)
  nameWithType: ICatalogRepository.CreateCatalogItemAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 148
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Создает элемент каталога.
  example: []
  syntax:
    content: Task<RepoResponse<ICatalogItem>> CreateCatalogItemAsync(Type itemType)
    parameters:
    - id: itemType
      type: System.Type
      description: Тип элемента каталога.
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
      description: Созданный элемент каталога.
    content.vb: Function CreateCatalogItemAsync(itemType As Type) As Task(Of RepoResponse(Of ICatalogItem))
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync*
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync
  id: SaveChangesAsync
  parent: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  langs:
  - csharp
  - vb
  name: SaveChangesAsync()
  nameWithType: ICatalogRepository.SaveChangesAsync()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SaveChangesAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/ICatalogRepository.cs
    startLine: 154
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  summary: Сохраняет изменения.
  example: []
  syntax:
    content: Task<RepoResponse> SaveChangesAsync()
    return:
      type: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
      description: ''
    content.vb: Function SaveChangesAsync() As Task(Of RepoResponse)
  overload: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync*
references:
- uid: ParmaGIS.Modules.Data.Space.Catalog
  commentId: N:ParmaGIS.Modules.Data.Space.Catalog
  href: ParmaGIS.html
  name: ParmaGIS.Modules.Data.Space.Catalog
  nameWithType: ParmaGIS.Modules.Data.Space.Catalog
  fullName: ParmaGIS.Modules.Data.Space.Catalog
  spec.csharp:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.Modules
    name: Modules
    href: ParmaGIS.Modules.html
  - name: .
  - uid: ParmaGIS.Modules.Data
    name: Data
    href: ParmaGIS.Modules.Data.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space
    name: Space
    href: ParmaGIS.Modules.Data.Space.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space.Catalog
    name: Catalog
    href: ParmaGIS.Modules.Data.Space.Catalog.html
  spec.vb:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.Modules
    name: Modules
    href: ParmaGIS.Modules.html
  - name: .
  - uid: ParmaGIS.Modules.Data
    name: Data
    href: ParmaGIS.Modules.Data.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space
    name: Space
    href: ParmaGIS.Modules.Data.Space.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space.Catalog
    name: Catalog
    href: ParmaGIS.Modules.Data.Space.Catalog.html
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_GetCatalogsAsync_System_Threading_CancellationToken_
  name: GetCatalogsAsync
  nameWithType: ICatalogRepository.GetCatalogsAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogsAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog[]}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<ICatalog[]>>
  nameWithType: Task<RepoResponse<ICatalog[]>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<ParmaGIS.Modules.Data.Space.Catalog.ICatalog[]>>
  nameWithType.vb: Task(Of RepoResponse(Of ICatalog()))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of ParmaGIS.Modules.Data.Space.Catalog.ICatalog()))
  name.vb: Task(Of RepoResponse(Of ICatalog()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
    name: ICatalog
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalog.html
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
    name: ICatalog
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalog.html
  - name: (
  - name: )
  - name: )
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_GetCatalogAsync_ParmaGIS_Modules_Data_Space_Catalog_ICatalogItem_
  name: GetCatalogAsync
  nameWithType: ICatalogRepository.GetCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
  commentId: T:ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
  parent: ParmaGIS.Modules.Data.Space.Catalog
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem.html
  name: ICatalogItem
  nameWithType: ICatalogItem
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalog}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<ICatalog>>
  nameWithType: Task<RepoResponse<ICatalog>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<ParmaGIS.Modules.Data.Space.Catalog.ICatalog>>
  nameWithType.vb: Task(Of RepoResponse(Of ICatalog))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of ParmaGIS.Modules.Data.Space.Catalog.ICatalog))
  name.vb: Task(Of RepoResponse(Of ICatalog))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
    name: ICatalog
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalog.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
    name: ICatalog
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalog.html
  - name: )
  - name: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_GetCatalogItemAsync__1_System_Object_
  name: GetCatalogItemAsync
  nameWithType: ICatalogRepository.GetCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemAsync
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{{T}}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<T>>
  nameWithType: Task<RepoResponse<T>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<T>>
  nameWithType.vb: Task(Of RepoResponse(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of T))
  name.vb: Task(Of RepoResponse(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<ICatalogItem>>
  nameWithType: Task<RepoResponse<ICatalogItem>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem>>
  nameWithType.vb: Task(Of RepoResponse(Of ICatalogItem))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem))
  name.vb: Task(Of RepoResponse(Of ICatalogItem))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
    name: ICatalogItem
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
    name: ICatalogItem
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem.html
  - name: )
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
  commentId: T:ParmaGIS.Modules.Data.Space.Catalog.ICatalog
  parent: ParmaGIS.Modules.Data.Space.Catalog
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalog.html
  name: ICatalog
  nameWithType: ICatalog
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalog
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_GetCatalogItemsAsync__1
  name: GetCatalogItemsAsync
  nameWithType: ICatalogRepository.GetCatalogItemsAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.GetCatalogItemsAsync
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{{T}[]}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{``0[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<T[]>>
  nameWithType: Task<RepoResponse<T[]>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<T[]>>
  nameWithType.vb: Task(Of RepoResponse(Of T()))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of T()))
  name.vb: Task(Of RepoResponse(Of T()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - name: T
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem[]}}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse{ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse<ICatalogItem[]>>
  nameWithType: Task<RepoResponse<ICatalogItem[]>>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse<ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem[]>>
  nameWithType.vb: Task(Of RepoResponse(Of ICatalogItem()))
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse(Of ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem()))
  name.vb: Task(Of RepoResponse(Of ICatalogItem()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
    name: ICatalogItem
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem.html
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse`1
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem
    name: ICatalogItem
    href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogItem.html
  - name: (
  - name: )
  - name: )
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_InsertCatalogAsync_ParmaGIS_Modules_Data_Space_Catalog_ICatalog_
  name: InsertCatalogAsync
  nameWithType: ICatalogRepository.InsertCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogAsync
- uid: System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
  commentId: T:System.Threading.Tasks.Task{ParmaGIS.Modules.Data.Space.RepoResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<RepoResponse>
  nameWithType: Task<RepoResponse>
  fullName: System.Threading.Tasks.Task<ParmaGIS.Modules.Data.Space.RepoResponse>
  nameWithType.vb: Task(Of RepoResponse)
  fullName.vb: System.Threading.Tasks.Task(Of ParmaGIS.Modules.Data.Space.RepoResponse)
  name.vb: Task(Of RepoResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: ParmaGIS.Modules.Data.Space.RepoResponse
    name: RepoResponse
    href: ParmaGIS.Modules.Data.Space.RepoResponse.html
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_RemoveCatalogAsync_ParmaGIS_Modules_Data_Space_Catalog_ICatalog_
  name: RemoveCatalogAsync
  nameWithType: ICatalogRepository.RemoveCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_CreateCatalogAsync_System_String_System_Type_
  name: CreateCatalogAsync
  nameWithType: ICatalogRepository.CreateCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_InsertCatalogItemAsync_ParmaGIS_Modules_Data_Space_Catalog_ICatalogItem_
  name: InsertCatalogItemAsync
  nameWithType: ICatalogRepository.InsertCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.InsertCatalogItemAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_RemoveCatalogItemAsync_ParmaGIS_Modules_Data_Space_Catalog_ICatalogItem_
  name: RemoveCatalogItemAsync
  nameWithType: ICatalogRepository.RemoveCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.RemoveCatalogItemAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_CreateCatalogItemAsync__1
  name: CreateCatalogItemAsync
  nameWithType: ICatalogRepository.CreateCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.CreateCatalogItemAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html#ParmaGIS_Modules_Data_Space_Catalog_ICatalogRepository_SaveChangesAsync
  name: SaveChangesAsync
  nameWithType: ICatalogRepository.SaveChangesAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.SaveChangesAsync
