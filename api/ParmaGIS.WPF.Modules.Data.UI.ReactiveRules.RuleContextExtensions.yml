### YamlMime:ManagedReference
items:
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  commentId: T:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  id: RuleContextExtensions
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  children:
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Object},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Object,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Threading.Tasks.Task{``1}},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{System.Threading.Tasks.Task{``2}},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``2},System.Boolean,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},``2,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Boolean,System.String,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.String,System.Boolean)
  - ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.String,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: RuleContextExtensions
  nameWithType: RuleContextExtensions
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  type: Class
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RuleContextExtensions
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 8
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static class RuleContextExtensions
    content.vb: Public Module RuleContextExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.String,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.String,System.Boolean)
  id: SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetError<T>(RuleContext<T>, object, string, string?, bool)
  nameWithType: RuleContextExtensions.SetError<T>(RulesObserver.RuleContext<T>, object, string, string?, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError<T>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, object, string, string?, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetError
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 10
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetError<T>(this RulesObserver.RuleContext<T> context, object owner, string propertyName, string? message, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: System.Object
    - id: propertyName
      type: System.String
    - id: message
      type: System.String
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SetError(Of T)(context As RulesObserver.RuleContext(Of T), owner As Object, propertyName As String, message As String, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError*
  nameWithType.vb: RuleContextExtensions.SetError(Of T)(RulesObserver.RuleContext(Of T), Object, String, String, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError(Of T)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), Object, String, String, Boolean)
  name.vb: SetError(Of T)(RuleContext(Of T), Object, String, String, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Boolean,System.String,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Boolean,System.String,System.Boolean)
  id: SetError``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Boolean,System.String,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetError<T>(RuleContext<T>, object, string, bool, string, bool)
  nameWithType: RuleContextExtensions.SetError<T>(RulesObserver.RuleContext<T>, object, string, bool, string, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError<T>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, object, string, bool, string, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetError
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 21
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetError<T>(this RulesObserver.RuleContext<T> context, object owner, string propertyName, bool condition, string message, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: System.Object
    - id: propertyName
      type: System.String
    - id: condition
      type: System.Boolean
    - id: message
      type: System.String
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SetError(Of T)(context As RulesObserver.RuleContext(Of T), owner As Object, propertyName As String, condition As Boolean, message As String, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError*
  nameWithType.vb: RuleContextExtensions.SetError(Of T)(RulesObserver.RuleContext(Of T), Object, String, Boolean, String, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError(Of T)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), Object, String, Boolean, String, Boolean)
  name.vb: SetError(Of T)(RuleContext(Of T), Object, String, Boolean, String, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.String,System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.String,System.Boolean,System.Boolean)
  id: SetError``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.String,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetError<T, TOwner, TProperty>(RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, string, bool, bool)
  nameWithType: RuleContextExtensions.SetError<T, TOwner, TProperty>(RulesObserver.RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, string, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError<T, TOwner, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, TOwner, System.Linq.Expressions.Expression<System.Func<TOwner, TProperty>>, string, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetError
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 33
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetError<T, TOwner, TProperty>(this RulesObserver.RuleContext<T> context, TOwner owner, Expression<Func<TOwner, TProperty>> propertySelector, string message, bool condition = true, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: '{TOwner}'
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOwner},{TProperty}}}
    - id: message
      type: System.String
    - id: condition
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TOwner
    - id: TProperty
    content.vb: Public Shared Sub SetError(Of T, TOwner, TProperty)(context As RulesObserver.RuleContext(Of T), owner As TOwner, propertySelector As Expression(Of Func(Of TOwner, TProperty)), message As String, condition As Boolean = True, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError*
  nameWithType.vb: RuleContextExtensions.SetError(Of T, TOwner, TProperty)(RulesObserver.RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), String, Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError(Of T, TOwner, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), TOwner, System.Linq.Expressions.Expression(Of System.Func(Of TOwner, TProperty)), String, Boolean, Boolean)
  name.vb: SetError(Of T, TOwner, TProperty)(RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), String, Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Object,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Object,System.Boolean)
  id: SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Object,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T>(RuleContext<T>, object, string, object, bool)
  nameWithType: RuleContextExtensions.SetCalc<T>(RulesObserver.RuleContext<T>, object, string, object, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, object, string, object, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 44
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T>(this RulesObserver.RuleContext<T> context, object owner, string propertyName, object calcValue, bool setCalc = false)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: System.Object
    - id: propertyName
      type: System.String
    - id: calcValue
      type: System.Object
    - id: setCalc
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SetCalc(Of T)(context As RulesObserver.RuleContext(Of T), owner As Object, propertyName As String, calcValue As Object, setCalc As Boolean = False)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T)(RulesObserver.RuleContext(Of T), Object, String, Object, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), Object, String, Object, Boolean)
  name.vb: SetCalc(Of T)(RuleContext(Of T), Object, String, Object, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Object},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Object},System.Boolean,System.Boolean)
  id: SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Object},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T>(RuleContext<T>, object, string, Func<object>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T>(RulesObserver.RuleContext<T>, object, string, Func<object>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, object, string, System.Func<object>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 49
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T>(this RulesObserver.RuleContext<T> context, object owner, string propertyName, Func<object> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: System.Object
    - id: propertyName
      type: System.String
    - id: calcValueFactory
      type: System.Func{System.Object}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SetCalc(Of T)(context As RulesObserver.RuleContext(Of T), owner As Object, propertyName As String, calcValueFactory As Func(Of Object), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T)(RulesObserver.RuleContext(Of T), Object, String, Func(Of Object), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), Object, String, System.Func(Of Object), Boolean, Boolean)
  name.vb: SetCalc(Of T)(RuleContext(Of T), Object, String, Func(Of Object), Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Boolean,System.Boolean)
  id: SetCalc``1(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Object,System.String,System.Func{System.Threading.Tasks.Task{System.Object}},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T>(RuleContext<T>, object, string, Func<Task<object>>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T>(RulesObserver.RuleContext<T>, object, string, Func<Task<object>>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, object, string, System.Func<System.Threading.Tasks.Task<object>>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 62
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T>(this RulesObserver.RuleContext<T> context, object owner, string propertyName, Func<Task<object>> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: System.Object
    - id: propertyName
      type: System.String
    - id: calcValueFactory
      type: System.Func{System.Threading.Tasks.Task{System.Object}}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Shared Sub SetCalc(Of T)(context As RulesObserver.RuleContext(Of T), owner As Object, propertyName As String, calcValueFactory As Func(Of Task(Of Object)), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T)(RulesObserver.RuleContext(Of T), Object, String, Func(Of Task(Of Object)), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), Object, String, System.Func(Of System.Threading.Tasks.Task(Of Object)), Boolean, Boolean)
  name.vb: SetCalc(Of T)(RuleContext(Of T), Object, String, Func(Of Task(Of Object)), Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},``2,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},``2,System.Boolean)
  id: SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},``2,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TOwner, TProperty>(RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, TProperty, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TOwner, TProperty>(RulesObserver.RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, TProperty, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TOwner, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, TOwner, System.Linq.Expressions.Expression<System.Func<TOwner, TProperty>>, TProperty, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 75
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TOwner, TProperty>(this RulesObserver.RuleContext<T> context, TOwner owner, Expression<Func<TOwner, TProperty>> propertySelector, TProperty calcValue, bool setCalc = false)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: '{TOwner}'
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOwner},{TProperty}}}
    - id: calcValue
      type: '{TProperty}'
    - id: setCalc
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TOwner
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TOwner, TProperty)(context As RulesObserver.RuleContext(Of T), owner As TOwner, propertySelector As Expression(Of Func(Of TOwner, TProperty)), calcValue As TProperty, setCalc As Boolean = False)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(RulesObserver.RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), TProperty, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), TOwner, System.Linq.Expressions.Expression(Of System.Func(Of TOwner, TProperty)), TProperty, Boolean)
  name.vb: SetCalc(Of T, TOwner, TProperty)(RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), TProperty, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``2},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``2},System.Boolean,System.Boolean)
  id: SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``2},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TOwner, TProperty>(RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, Func<TProperty>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TOwner, TProperty>(RulesObserver.RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, Func<TProperty>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TOwner, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, TOwner, System.Linq.Expressions.Expression<System.Func<TOwner, TProperty>>, System.Func<TProperty>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 85
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TOwner, TProperty>(this RulesObserver.RuleContext<T> context, TOwner owner, Expression<Func<TOwner, TProperty>> propertySelector, Func<TProperty> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: '{TOwner}'
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOwner},{TProperty}}}
    - id: calcValueFactory
      type: System.Func{{TProperty}}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TOwner
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TOwner, TProperty)(context As RulesObserver.RuleContext(Of T), owner As TOwner, propertySelector As Expression(Of Func(Of TOwner, TProperty)), calcValueFactory As Func(Of TProperty), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(RulesObserver.RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), Func(Of TProperty), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), TOwner, System.Linq.Expressions.Expression(Of System.Func(Of TOwner, TProperty)), System.Func(Of TProperty), Boolean, Boolean)
  name.vb: SetCalc(Of T, TOwner, TProperty)(RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), Func(Of TProperty), Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{System.Threading.Tasks.Task{``2}},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{System.Threading.Tasks.Task{``2}},System.Boolean,System.Boolean)
  id: SetCalc``3(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{System.Threading.Tasks.Task{``2}},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TOwner, TProperty>(RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, Func<Task<TProperty>>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TOwner, TProperty>(RulesObserver.RuleContext<T>, TOwner, Expression<Func<TOwner, TProperty>>, Func<Task<TProperty>>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TOwner, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, TOwner, System.Linq.Expressions.Expression<System.Func<TOwner, TProperty>>, System.Func<System.Threading.Tasks.Task<TProperty>>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 96
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TOwner, TProperty>(this RulesObserver.RuleContext<T> context, TOwner owner, Expression<Func<TOwner, TProperty>> propertySelector, Func<Task<TProperty>> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: owner
      type: '{TOwner}'
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOwner},{TProperty}}}
    - id: calcValueFactory
      type: System.Func{System.Threading.Tasks.Task{{TProperty}}}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TOwner
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TOwner, TProperty)(context As RulesObserver.RuleContext(Of T), owner As TOwner, propertySelector As Expression(Of Func(Of TOwner, TProperty)), calcValueFactory As Func(Of Task(Of TProperty)), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(RulesObserver.RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), Func(Of Task(Of TProperty)), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TOwner, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), TOwner, System.Linq.Expressions.Expression(Of System.Func(Of TOwner, TProperty)), System.Func(Of System.Threading.Tasks.Task(Of TProperty)), Boolean, Boolean)
  name.vb: SetCalc(Of T, TOwner, TProperty)(RuleContext(Of T), TOwner, Expression(Of Func(Of TOwner, TProperty)), Func(Of Task(Of TProperty)), Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)
  id: SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TProperty>(RuleContext<T>, Expression<Func<T, TProperty>>, TProperty, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TProperty>(RulesObserver.RuleContext<T>, Expression<Func<T, TProperty>>, TProperty, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, System.Linq.Expressions.Expression<System.Func<T, TProperty>>, TProperty, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 107
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TProperty>(this RulesObserver.RuleContext<T> context, Expression<Func<T, TProperty>> propertySelector, TProperty calcValue, bool setCalc = false)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProperty}}}
    - id: calcValue
      type: '{TProperty}'
    - id: setCalc
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TProperty)(context As RulesObserver.RuleContext(Of T), propertySelector As Expression(Of Func(Of T, TProperty)), calcValue As TProperty, setCalc As Boolean = False)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TProperty)(RulesObserver.RuleContext(Of T), Expression(Of Func(Of T, TProperty)), TProperty, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TProperty)), TProperty, Boolean)
  name.vb: SetCalc(Of T, TProperty)(RuleContext(Of T), Expression(Of Func(Of T, TProperty)), TProperty, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1},System.Boolean,System.Boolean)
  id: SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TProperty>(RuleContext<T>, Expression<Func<T, TProperty>>, Func<TProperty>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TProperty>(RulesObserver.RuleContext<T>, Expression<Func<T, TProperty>>, Func<TProperty>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, System.Linq.Expressions.Expression<System.Func<T, TProperty>>, System.Func<TProperty>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 116
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TProperty>(this RulesObserver.RuleContext<T> context, Expression<Func<T, TProperty>> propertySelector, Func<TProperty> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProperty}}}
    - id: calcValueFactory
      type: System.Func{{TProperty}}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TProperty)(context As RulesObserver.RuleContext(Of T), propertySelector As Expression(Of Func(Of T, TProperty)), calcValueFactory As Func(Of TProperty), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TProperty)(RulesObserver.RuleContext(Of T), Expression(Of Func(Of T, TProperty)), Func(Of TProperty), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TProperty)), System.Func(Of TProperty), Boolean, Boolean)
  name.vb: SetCalc(Of T, TProperty)(RuleContext(Of T), Expression(Of Func(Of T, TProperty)), Func(Of TProperty), Boolean, Boolean)
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Threading.Tasks.Task{``1}},System.Boolean,System.Boolean)
  commentId: M:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Threading.Tasks.Task{``1}},System.Boolean,System.Boolean)
  id: SetCalc``2(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Threading.Tasks.Task{``1}},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions
  langs:
  - csharp
  - vb
  name: SetCalc<T, TProperty>(RuleContext<T>, Expression<Func<T, TProperty>>, Func<Task<TProperty>>, bool, bool)
  nameWithType: RuleContextExtensions.SetCalc<T, TProperty>(RulesObserver.RuleContext<T>, Expression<Func<T, TProperty>>, Func<Task<TProperty>>, bool, bool)
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc<T, TProperty>(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>, System.Linq.Expressions.Expression<System.Func<T, TProperty>>, System.Func<System.Threading.Tasks.Task<TProperty>>, bool, bool)
  type: Method
  source:
    remote:
      path: platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SetCalc
    path: ../ParmaGIS master/platforms/wpf/modules/ParmaGIS.WPF.Modules.Data.UI/ReactiveRules/RuleContextExtensions.cs
    startLine: 126
  assemblies:
  - ParmaGIS.WPF.Modules.Data.UI
  namespace: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  syntax:
    content: public static void SetCalc<T, TProperty>(this RulesObserver.RuleContext<T> context, Expression<Func<T, TProperty>> propertySelector, Func<Task<TProperty>> calcValueFactory, bool setCalc = false, bool importantError = true)
    parameters:
    - id: context
      type: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
    - id: propertySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProperty}}}
    - id: calcValueFactory
      type: System.Func{System.Threading.Tasks.Task{{TProperty}}}
    - id: setCalc
      type: System.Boolean
    - id: importantError
      type: System.Boolean
    typeParameters:
    - id: T
    - id: TProperty
    content.vb: Public Shared Sub SetCalc(Of T, TProperty)(context As RulesObserver.RuleContext(Of T), propertySelector As Expression(Of Func(Of T, TProperty)), calcValueFactory As Func(Of Task(Of TProperty)), setCalc As Boolean = False, importantError As Boolean = True)
  overload: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  nameWithType.vb: RuleContextExtensions.SetCalc(Of T, TProperty)(RulesObserver.RuleContext(Of T), Expression(Of Func(Of T, TProperty)), Func(Of Task(Of TProperty)), Boolean, Boolean)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc(Of T, TProperty)(ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TProperty)), System.Func(Of System.Threading.Tasks.Task(Of TProperty)), Boolean, Boolean)
  name.vb: SetCalc(Of T, TProperty)(RuleContext(Of T), Expression(Of Func(Of T, TProperty)), Func(Of Task(Of TProperty)), Boolean, Boolean)
references:
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  commentId: N:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  href: ParmaGIS.html
  name: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  nameWithType: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  spec.csharp:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.Modules
    name: Modules
    href: ParmaGIS.WPF.Modules.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data
    name: Data
    href: ParmaGIS.WPF.Modules.Data.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI
    name: UI
    href: ParmaGIS.WPF.Modules.Data.UI.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
    name: ReactiveRules
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.html
  spec.vb:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.Modules
    name: Modules
    href: ParmaGIS.WPF.Modules.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data
    name: Data
    href: ParmaGIS.WPF.Modules.Data.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI
    name: UI
    href: ParmaGIS.WPF.Modules.Data.UI.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
    name: ReactiveRules
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError*
  commentId: Overload:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError
  href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.html#ParmaGIS_WPF_Modules_Data_UI_ReactiveRules_RuleContextExtensions_SetError__1_ParmaGIS_WPF_Modules_Data_UI_ReactiveRules_RulesObserver_RuleContext___0__System_Object_System_String_System_String_System_Boolean_
  name: SetError
  nameWithType: RuleContextExtensions.SetError
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetError
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{{T}}
  commentId: T:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext{``0}
  parent: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules
  definition: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
  href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  name: RulesObserver.RuleContext<T>
  nameWithType: RulesObserver.RuleContext<T>
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<T>
  nameWithType.vb: RulesObserver.RuleContext(Of T)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of T)
  name.vb: RulesObserver.RuleContext(Of T)
  spec.csharp:
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver
    name: RulesObserver
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
    name: RuleContext
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver
    name: RulesObserver
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
    name: RuleContext
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
  commentId: T:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
  href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  name: RulesObserver.RuleContext<TProperty>
  nameWithType: RulesObserver.RuleContext<TProperty>
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext<TProperty>
  nameWithType.vb: RulesObserver.RuleContext(Of TProperty)
  fullName.vb: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext(Of TProperty)
  name.vb: RulesObserver.RuleContext(Of TProperty)
  spec.csharp:
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver
    name: RulesObserver
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
    name: RuleContext
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext-1.html
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver
    name: RulesObserver
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.html
  - name: .
  - uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext`1
    name: RuleContext
    href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RulesObserver.RuleContext-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: '{TOwner}'
  commentId: '!:TOwner'
  definition: TOwner
  name: TOwner
  nameWithType: TOwner
  fullName: TOwner
- uid: System.Linq.Expressions.Expression{System.Func{{TOwner},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TOwner, TProperty>>
  nameWithType: Expression<Func<TOwner, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOwner, TProperty>>
  nameWithType.vb: Expression(Of Func(Of TOwner, TProperty))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOwner, TProperty))
  name.vb: Expression(Of Func(Of TOwner, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TOwner
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TOwner
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
  - name: )
- uid: TOwner
  name: TOwner
  nameWithType: TOwner
  fullName: TOwner
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc*
  commentId: Overload:ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc
  href: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.html#ParmaGIS_WPF_Modules_Data_UI_ReactiveRules_RuleContextExtensions_SetCalc__1_ParmaGIS_WPF_Modules_Data_UI_ReactiveRules_RulesObserver_RuleContext___0__System_Object_System_String_System_Object_System_Boolean_
  name: SetCalc
  nameWithType: RuleContextExtensions.SetCalc
  fullName: ParmaGIS.WPF.Modules.Data.UI.ReactiveRules.RuleContextExtensions.SetCalc
- uid: System.Func{System.Object}
  commentId: T:System.Func{System.Object}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<object>
  nameWithType: Func<object>
  fullName: System.Func<object>
  nameWithType.vb: Func(Of Object)
  fullName.vb: System.Func(Of Object)
  name.vb: Func(Of Object)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.Threading.Tasks.Task{System.Object}}
  commentId: T:System.Func{System.Threading.Tasks.Task{System.Object}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task<object>>
  nameWithType: Func<Task<object>>
  fullName: System.Func<System.Threading.Tasks.Task<object>>
  nameWithType.vb: Func(Of Task(Of Object))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of Object))
  name.vb: Func(Of Task(Of Object))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: )
- uid: '{TProperty}'
  commentId: '!:TProperty'
  definition: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: System.Func{{TProperty}}
  commentId: T:System.Func{``2}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TProperty>
  nameWithType: Func<TProperty>
  fullName: System.Func<TProperty>
  nameWithType.vb: Func(Of TProperty)
  fullName.vb: System.Func(Of TProperty)
  name.vb: Func(Of TProperty)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
- uid: System.Func{System.Threading.Tasks.Task{{TProperty}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``2}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task<TProperty>>
  nameWithType: Func<Task<TProperty>>
  fullName: System.Func<System.Threading.Tasks.Task<TProperty>>
  nameWithType.vb: Func(Of Task(Of TProperty))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TProperty))
  name.vb: Func(Of Task(Of TProperty))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TProperty
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TProperty
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, TProperty>>
  nameWithType: Expression<Func<T, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TProperty>>
  nameWithType.vb: Expression(Of Func(Of T, TProperty))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TProperty))
  name.vb: Expression(Of Func(Of T, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
  - name: )
