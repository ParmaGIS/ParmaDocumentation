### YamlMime:ManagedReference
items:
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  commentId: T:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  id: CatalogRepositoryBase`3
  parent: ParmaGIS.Modules.Data.Space.Catalog
  children:
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync(System.String,System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync``1(System.String)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(`1)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(`2)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(System.Type,`0)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(`1,`0)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync``1(`0)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(System.Type)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(`1)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync``1
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync(`1)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync``1(``0)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync(`1)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync``1(``0)
  - ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync
  langs:
  - csharp
  - vb
  name: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>
  type: Class
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CatalogRepositoryBase
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 5
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract class CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem> : ICatalogRepository where TCatalog : class, ICatalog where TCatalogItem : class, ICatalogItem'
    typeParameters:
    - id: TObjectId
    - id: TCatalog
    - id: TCatalogItem
    content.vb: Public MustInherit Class CatalogRepositoryBase(Of TObjectId, TCatalog As {Class, ICatalog}, TCatalogItem As {Class, ICatalogItem}) Implements ICatalogRepository
  inheritance:
  - System.Object
  derivedClasses:
  - ParmaGIS.Modules.Data.Space.DAL.DALCatalogRepositoryBase`3
  implements:
  - ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem)
  name.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync(System.String,System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync(System.String,System.Type)
  id: CreateCatalogAsync(System.String,System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateCatalogAsync(string, Type)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync(string, Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync(string, System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 9
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalog> CreateCatalogAsync(string name, Type itemType)
    parameters:
    - id: name
      type: System.String
    - id: itemType
      type: System.Type
    return:
      type: System.Threading.Tasks.Task{{TCatalog}}
    content.vb: Public MustOverride Function CreateCatalogAsync(name As String, itemType As Type) As Task(Of TCatalog)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync(String, Type)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync(String, System.Type)
  name.vb: CreateCatalogAsync(String, Type)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(`1)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(`1)
  id: CreateCatalogItemAsync(`1)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync(TCatalog)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync(TCatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync(TCatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 10
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem> CreateCatalogItemAsync(TCatalog catalog)
    parameters:
    - id: catalog
      type: '{TCatalog}'
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}}
    content.vb: Public MustOverride Function CreateCatalogItemAsync(catalog As TCatalog) As Task(Of TCatalogItem)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(TCatalog)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(TCatalog)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync(System.Type)
  id: CreateCatalogItemAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync(Type)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 11
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem> CreateCatalogItemAsync(Type itemType)
    parameters:
    - id: itemType
      type: System.Type
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}}
    content.vb: Public MustOverride Function CreateCatalogItemAsync(itemType As Type) As Task(Of TCatalogItem)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(Type)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(System.Type)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(`2)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(`2)
  id: GetCatalogAsync(`2)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogAsync(TCatalogItem)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync(TCatalogItem)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync(TCatalogItem)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 12
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalog?> GetCatalogAsync(TCatalogItem catalogItem)
    parameters:
    - id: catalogItem
      type: '{TCatalogItem}'
    return:
      type: System.Threading.Tasks.Task{{TCatalog}}
    content.vb: Public MustOverride Function GetCatalogAsync(catalogItem As TCatalogItem) As Task(Of TCatalog)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(TCatalogItem)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(TCatalogItem)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync(System.Type)
  id: GetCatalogAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogAsync(Type)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 13
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalog?> GetCatalogAsync(Type itemType)
    parameters:
    - id: itemType
      type: System.Type
    return:
      type: System.Threading.Tasks.Task{{TCatalog}}
    content.vb: Public MustOverride Function GetCatalogAsync(itemType As Type) As Task(Of TCatalog)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(Type)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(System.Type)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(System.Type,`0)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(System.Type,`0)
  id: GetCatalogItemAsync(System.Type,`0)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync(Type, TObjectId)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync(Type, TObjectId)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync(System.Type, TObjectId)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 14
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem?> GetCatalogItemAsync(Type itemType, TObjectId id)
    parameters:
    - id: itemType
      type: System.Type
    - id: id
      type: '{TObjectId}'
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}}
    content.vb: Public MustOverride Function GetCatalogItemAsync(itemType As Type, id As TObjectId) As Task(Of TCatalogItem)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(Type, TObjectId)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(System.Type, TObjectId)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(`1,`0)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync(`1,`0)
  id: GetCatalogItemAsync(`1,`0)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync(TCatalog, TObjectId)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync(TCatalog, TObjectId)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync(TCatalog, TObjectId)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 15
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem?> GetCatalogItemAsync(TCatalog catalog, TObjectId id)
    parameters:
    - id: catalog
      type: '{TCatalog}'
    - id: id
      type: '{TObjectId}'
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}}
    content.vb: Public MustOverride Function GetCatalogItemAsync(catalog As TCatalog, id As TObjectId) As Task(Of TCatalogItem)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(TCatalog, TObjectId)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(TCatalog, TObjectId)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(System.Type)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(System.Type)
  id: GetCatalogItemsAsync(System.Type)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync(Type)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync(Type)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync(System.Type)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 16
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem[]> GetCatalogItemsAsync(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}[]}
    content.vb: Public MustOverride Function GetCatalogItemsAsync(type As Type) As Task(Of TCatalogItem())
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(Type)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(System.Type)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(`1)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync(`1)
  id: GetCatalogItemsAsync(`1)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync(TCatalog)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync(TCatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync(TCatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 17
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalogItem[]> GetCatalogItemsAsync(TCatalog catalogInfo)
    parameters:
    - id: catalogInfo
      type: '{TCatalog}'
    return:
      type: System.Threading.Tasks.Task{{TCatalogItem}[]}
    content.vb: Public MustOverride Function GetCatalogItemsAsync(catalogInfo As TCatalog) As Task(Of TCatalogItem())
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(TCatalog)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(TCatalog)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync
  id: GetCatalogsAsync
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogsAsync()
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogsAsync()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogsAsync()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 18
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task<TCatalog[]> GetCatalogsAsync()
    return:
      type: System.Threading.Tasks.Task{{TCatalog}[]}
    content.vb: Public MustOverride Function GetCatalogsAsync() As Task(Of TCatalog())
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogsAsync()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogsAsync()
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync(`1)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync(`1)
  id: InsertCatalogAsync(`1)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: InsertCatalogAsync(TCatalog)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogAsync(TCatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogAsync(TCatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: InsertCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 19
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task InsertCatalogAsync(TCatalog catalog)
    parameters:
    - id: catalog
      type: '{TCatalog}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function InsertCatalogAsync(catalog As TCatalog) As Task
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogAsync(TCatalog)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogAsync(TCatalog)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync(`1)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync(`1)
  id: RemoveCatalogAsync(`1)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveCatalogAsync(TCatalog)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogAsync(TCatalog)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogAsync(TCatalog)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 20
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task RemoveCatalogAsync(TCatalog catalog)
    parameters:
    - id: catalog
      type: '{TCatalog}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function RemoveCatalogAsync(catalog As TCatalog) As Task
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogAsync(TCatalog)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogAsync(TCatalog)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync
  id: SaveChangesAsync
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: SaveChangesAsync()
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.SaveChangesAsync()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.SaveChangesAsync()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: SaveChangesAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 21
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: public abstract Task SaveChangesAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function SaveChangesAsync() As Task
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).SaveChangesAsync()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).SaveChangesAsync()
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync``1(System.String)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync``1(System.String)
  id: CreateCatalogAsync``1(System.String)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateCatalogAsync<TItem>(string)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync<TItem>(string)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync<TItem>(string)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 23
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task<TCatalog> CreateCatalogAsync<TItem>(string name) where TItem : TCatalogItem'
    parameters:
    - id: name
      type: System.String
    typeParameters:
    - id: TItem
    return:
      type: System.Threading.Tasks.Task{{TCatalog}}
    content.vb: Public MustOverride Function CreateCatalogAsync(Of TItem As TCatalogItem)(name As String) As Task(Of TCatalog)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync(Of TItem)(String)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync(Of TItem)(String)
  name.vb: CreateCatalogAsync(Of TItem)(String)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync``1
  id: CreateCatalogItemAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: CreateCatalogItemAsync<T>()
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync<T>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync<T>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: CreateCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 24
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task<T> CreateCatalogItemAsync<T>() where T : TCatalogItem'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public MustOverride Function CreateCatalogItemAsync(Of T As TCatalogItem)() As Task(Of T)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(Of T)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync(Of T)()
  name.vb: CreateCatalogItemAsync(Of T)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync``1
  id: GetCatalogAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogAsync<TItem>()
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync<TItem>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync<TItem>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 25
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task<TCatalog?> GetCatalogAsync<TItem>() where TItem : TCatalogItem'
    typeParameters:
    - id: TItem
    return:
      type: System.Threading.Tasks.Task{{TCatalog}}
    content.vb: Public MustOverride Function GetCatalogAsync(Of TItem As TCatalogItem)() As Task(Of TCatalog)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(Of TItem)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync(Of TItem)()
  name.vb: GetCatalogAsync(Of TItem)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync``1(`0)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync``1(`0)
  id: GetCatalogItemAsync``1(`0)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemAsync<T>(TObjectId)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync<T>(TObjectId)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync<T>(TObjectId)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 26
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task<T?> GetCatalogItemAsync<T>(TObjectId id) where T : TCatalogItem'
    parameters:
    - id: id
      type: '{TObjectId}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public MustOverride Function GetCatalogItemAsync(Of T As TCatalogItem)(id As TObjectId) As Task(Of T)
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(Of T)(TObjectId)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync(Of T)(TObjectId)
  name.vb: GetCatalogItemAsync(Of T)(TObjectId)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync``1
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync``1
  id: GetCatalogItemsAsync``1
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: GetCatalogItemsAsync<T>()
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync<T>()
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync<T>()
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetCatalogItemsAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 27
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task<T[]> GetCatalogItemsAsync<T>() where T : TCatalogItem'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}[]}
    content.vb: Public MustOverride Function GetCatalogItemsAsync(Of T As TCatalogItem)() As Task(Of T())
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(Of T)()
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync(Of T)()
  name.vb: GetCatalogItemsAsync(Of T)()
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync``1(``0)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync``1(``0)
  id: InsertCatalogItemAsync``1(``0)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: InsertCatalogItemAsync<T>(T)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogItemAsync<T>(T)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogItemAsync<T>(T)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: InsertCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 28
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task InsertCatalogItemAsync<T>(T catalogItem) where T : TCatalogItem'
    parameters:
    - id: catalogItem
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function InsertCatalogItemAsync(Of T As TCatalogItem)(catalogItem As T) As Task
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogItemAsync(Of T)(T)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogItemAsync(Of T)(T)
  name.vb: InsertCatalogItemAsync(Of T)(T)
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync``1(``0)
  commentId: M:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync``1(``0)
  id: RemoveCatalogItemAsync``1(``0)
  parent: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3
  langs:
  - csharp
  - vb
  name: RemoveCatalogItemAsync<T>(T)
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogItemAsync<T>(T)
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogItemAsync<T>(T)
  type: Method
  source:
    remote:
      path: common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveCatalogItemAsync
    path: ../ParmaGIS master/common/modules/ParmaGIS.Modules.Data/Space/Catalog/CatalogRepositoryBase.cs
    startLine: 29
  assemblies:
  - ParmaGIS.Modules.Data
  namespace: ParmaGIS.Modules.Data.Space.Catalog
  syntax:
    content: 'public abstract Task RemoveCatalogItemAsync<T>(T catalogItem) where T : TCatalogItem'
    parameters:
    - id: catalogItem
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function RemoveCatalogItemAsync(Of T As TCatalogItem)(catalogItem As T) As Task
  overload: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync*
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogItemAsync(Of T)(T)
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogItemAsync(Of T)(T)
  name.vb: RemoveCatalogItemAsync(Of T)(T)
references:
- uid: ParmaGIS.Modules.Data.Space.Catalog
  commentId: N:ParmaGIS.Modules.Data.Space.Catalog
  href: ParmaGIS.html
  name: ParmaGIS.Modules.Data.Space.Catalog
  nameWithType: ParmaGIS.Modules.Data.Space.Catalog
  fullName: ParmaGIS.Modules.Data.Space.Catalog
  spec.csharp:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.Modules
    name: Modules
    href: ParmaGIS.Modules.html
  - name: .
  - uid: ParmaGIS.Modules.Data
    name: Data
    href: ParmaGIS.Modules.Data.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space
    name: Space
    href: ParmaGIS.Modules.Data.Space.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space.Catalog
    name: Catalog
    href: ParmaGIS.Modules.Data.Space.Catalog.html
  spec.vb:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.Modules
    name: Modules
    href: ParmaGIS.Modules.html
  - name: .
  - uid: ParmaGIS.Modules.Data
    name: Data
    href: ParmaGIS.Modules.Data.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space
    name: Space
    href: ParmaGIS.Modules.Data.Space.html
  - name: .
  - uid: ParmaGIS.Modules.Data.Space.Catalog
    name: Catalog
    href: ParmaGIS.Modules.Data.Space.Catalog.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  commentId: T:ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
  parent: ParmaGIS.Modules.Data.Space.Catalog
  href: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository.html
  name: ICatalogRepository
  nameWithType: ICatalogRepository
  fullName: ParmaGIS.Modules.Data.Space.Catalog.ICatalogRepository
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_CreateCatalogAsync_System_String_System_Type_
  name: CreateCatalogAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Threading.Tasks.Task{{TCatalog}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TCatalog>
  nameWithType: Task<TCatalog>
  fullName: System.Threading.Tasks.Task<TCatalog>
  nameWithType.vb: Task(Of TCatalog)
  fullName.vb: System.Threading.Tasks.Task(Of TCatalog)
  name.vb: Task(Of TCatalog)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TCatalog
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TCatalog
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.CreateCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_CreateCatalogItemAsync__1_
  name: CreateCatalogItemAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.CreateCatalogItemAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).CreateCatalogItemAsync
- uid: '{TCatalog}'
  commentId: '!:TCatalog'
  definition: TCatalog
  name: TCatalog
  nameWithType: TCatalog
  fullName: TCatalog
- uid: System.Threading.Tasks.Task{{TCatalogItem}}
  commentId: T:System.Threading.Tasks.Task{`2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TCatalogItem>
  nameWithType: Task<TCatalogItem>
  fullName: System.Threading.Tasks.Task<TCatalogItem>
  nameWithType.vb: Task(Of TCatalogItem)
  fullName.vb: System.Threading.Tasks.Task(Of TCatalogItem)
  name.vb: Task(Of TCatalogItem)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TCatalogItem
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TCatalogItem
  - name: )
- uid: TCatalog
  name: TCatalog
  nameWithType: TCatalog
  fullName: TCatalog
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_GetCatalogAsync__2_
  name: GetCatalogAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogAsync
- uid: '{TCatalogItem}'
  commentId: '!:TCatalogItem'
  definition: TCatalogItem
  name: TCatalogItem
  nameWithType: TCatalogItem
  fullName: TCatalogItem
- uid: TCatalogItem
  name: TCatalogItem
  nameWithType: TCatalogItem
  fullName: TCatalogItem
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_GetCatalogItemAsync_System_Type__0_
  name: GetCatalogItemAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemAsync
- uid: '{TObjectId}'
  commentId: '!:TObjectId'
  definition: TObjectId
  name: TObjectId
  nameWithType: TObjectId
  fullName: TObjectId
- uid: TObjectId
  name: TObjectId
  nameWithType: TObjectId
  fullName: TObjectId
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogItemsAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_GetCatalogItemsAsync_System_Type_
  name: GetCatalogItemsAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogItemsAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogItemsAsync
- uid: System.Threading.Tasks.Task{{TCatalogItem}[]}
  commentId: T:System.Threading.Tasks.Task{`2[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TCatalogItem[]>
  nameWithType: Task<TCatalogItem[]>
  fullName: System.Threading.Tasks.Task<TCatalogItem[]>
  nameWithType.vb: Task(Of TCatalogItem())
  fullName.vb: System.Threading.Tasks.Task(Of TCatalogItem())
  name.vb: Task(Of TCatalogItem())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TCatalogItem
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TCatalogItem
  - name: (
  - name: )
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.GetCatalogsAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_GetCatalogsAsync
  name: GetCatalogsAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogsAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.GetCatalogsAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogsAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).GetCatalogsAsync
- uid: System.Threading.Tasks.Task{{TCatalog}[]}
  commentId: T:System.Threading.Tasks.Task{`1[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TCatalog[]>
  nameWithType: Task<TCatalog[]>
  fullName: System.Threading.Tasks.Task<TCatalog[]>
  nameWithType.vb: Task(Of TCatalog())
  fullName.vb: System.Threading.Tasks.Task(Of TCatalog())
  name.vb: Task(Of TCatalog())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TCatalog
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TCatalog
  - name: (
  - name: )
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_InsertCatalogAsync__1_
  name: InsertCatalogAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_RemoveCatalogAsync__1_
  name: RemoveCatalogAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogAsync
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.SaveChangesAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_SaveChangesAsync
  name: SaveChangesAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.SaveChangesAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.SaveChangesAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).SaveChangesAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).SaveChangesAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task{{T}[]}
  commentId: T:System.Threading.Tasks.Task{`0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T[]>
  nameWithType: Task<T[]>
  fullName: System.Threading.Tasks.Task<T[]>
  nameWithType.vb: Task(Of T())
  fullName.vb: System.Threading.Tasks.Task(Of T())
  name.vb: Task(Of T())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.InsertCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_InsertCatalogItemAsync__1___0_
  name: InsertCatalogItemAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.InsertCatalogItemAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogItemAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).InsertCatalogItemAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync*
  commentId: Overload:ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase`3.RemoveCatalogItemAsync
  href: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase-3.html#ParmaGIS_Modules_Data_Space_Catalog_CatalogRepositoryBase_3_RemoveCatalogItemAsync__1___0_
  name: RemoveCatalogItemAsync
  nameWithType: CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogItemAsync
  fullName: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase<TObjectId, TCatalog, TCatalogItem>.RemoveCatalogItemAsync
  nameWithType.vb: CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogItemAsync
  fullName.vb: ParmaGIS.Modules.Data.Space.Catalog.CatalogRepositoryBase(Of TObjectId, TCatalog, TCatalogItem).RemoveCatalogItemAsync
