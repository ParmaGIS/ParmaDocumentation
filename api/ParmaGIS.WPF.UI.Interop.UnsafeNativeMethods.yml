### YamlMime:ManagedReference
items:
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  commentId: T:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  id: UnsafeNativeMethods
  parent: ParmaGIS.WPF.UI.Interop
  children:
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.IntPtr)
  - ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window)
  langs:
  - csharp
  - vb
  name: UnsafeNativeMethods
  nameWithType: UnsafeNativeMethods
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  type: Class
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: UnsafeNativeMethods
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 24
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: A set of dangerous methods to modify the appearance.
  example: []
  syntax:
    content: public static class UnsafeNativeMethods
    content.vb: Public Module UnsafeNativeMethods
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  id: ApplyWindowCornerPreference(System.Windows.Window,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowCornerPreference(Window, WindowCornerPreference)
  nameWithType: UnsafeNativeMethods.ApplyWindowCornerPreference(Window, WindowCornerPreference)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window, ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowCornerPreference
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 32
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to set the <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref> corner preference.
  example: []
  syntax:
    content: public static bool ApplyWindowCornerPreference(Window window, WindowCornerPreference cornerPreference)
    parameters:
    - id: window
      type: System.Windows.Window
      description: Selected window.
    - id: cornerPreference
      type: ParmaGIS.WPF.UI.Controls.WindowCornerPreference
      description: Window corner preference.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowCornerPreference(window As Window, cornerPreference As WindowCornerPreference) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference*
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  id: ApplyWindowCornerPreference(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowCornerPreference(nint, WindowCornerPreference)
  nameWithType: UnsafeNativeMethods.ApplyWindowCornerPreference(nint, WindowCornerPreference)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(nint, ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowCornerPreference
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 42
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to set the corner preference of the selected window.
  example: []
  syntax:
    content: public static bool ApplyWindowCornerPreference(nint handle, WindowCornerPreference cornerPreference)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Selected window handle.
    - id: cornerPreference
      type: ParmaGIS.WPF.UI.Controls.WindowCornerPreference
      description: Window corner preference.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowCornerPreference(handle As IntPtr, cornerPreference As WindowCornerPreference) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowCornerPreference(IntPtr, WindowCornerPreference)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr, ParmaGIS.WPF.UI.Controls.WindowCornerPreference)
  name.vb: ApplyWindowCornerPreference(IntPtr, WindowCornerPreference)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)
  id: RemoveWindowDarkMode(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowDarkMode(Window?)
  nameWithType: UnsafeNativeMethods.RemoveWindowDarkMode(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowDarkMode
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 72
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to remove ImmersiveDarkMode effect from the <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool RemoveWindowDarkMode(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: The window to which the effect is to be applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function RemoveWindowDarkMode(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode*
  nameWithType.vb: UnsafeNativeMethods.RemoveWindowDarkMode(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)
  name.vb: RemoveWindowDarkMode(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)
  id: RemoveWindowDarkMode(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowDarkMode(nint)
  nameWithType: UnsafeNativeMethods.RemoveWindowDarkMode(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowDarkMode
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 80
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to remove ImmersiveDarkMode effect from the window handle.
  example: []
  syntax:
    content: public static bool RemoveWindowDarkMode(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function RemoveWindowDarkMode(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode*
  nameWithType.vb: UnsafeNativeMethods.RemoveWindowDarkMode(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)
  name.vb: RemoveWindowDarkMode(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)
  id: ApplyWindowDarkMode(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowDarkMode(Window?)
  nameWithType: UnsafeNativeMethods.ApplyWindowDarkMode(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowDarkMode
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 111
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply ImmersiveDarkMode effect for the <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool ApplyWindowDarkMode(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: The window to which the effect is to be applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowDarkMode(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowDarkMode(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)
  name.vb: ApplyWindowDarkMode(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)
  id: ApplyWindowDarkMode(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowDarkMode(nint)
  nameWithType: UnsafeNativeMethods.ApplyWindowDarkMode(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowDarkMode
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 119
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply ImmersiveDarkMode effect for the window handle.
  example: []
  syntax:
    content: public static bool ApplyWindowDarkMode(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowDarkMode(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowDarkMode(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)
  name.vb: ApplyWindowDarkMode(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window)
  id: RemoveWindowTitlebarContents(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowTitlebarContents(Window?)
  nameWithType: UnsafeNativeMethods.RemoveWindowTitlebarContents(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowTitlebarContents
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 150
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to remove titlebar from selected <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool RemoveWindowTitlebarContents(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: The window to which the effect is to be applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function RemoveWindowTitlebarContents(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents*
  nameWithType.vb: UnsafeNativeMethods.RemoveWindowTitlebarContents(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.Windows.Window)
  name.vb: RemoveWindowTitlebarContents(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.IntPtr)
  id: RemoveWindowTitlebarContents(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowTitlebarContents(nint)
  nameWithType: UnsafeNativeMethods.RemoveWindowTitlebarContents(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowTitlebarContents
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 176
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to remove titlebar from selected window handle.
  example: []
  syntax:
    content: public static bool RemoveWindowTitlebarContents(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function RemoveWindowTitlebarContents(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents*
  nameWithType.vb: UnsafeNativeMethods.RemoveWindowTitlebarContents(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents(System.IntPtr)
  name.vb: RemoveWindowTitlebarContents(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  id: ApplyWindowBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowBackdrop(nint, WindowBackdropType)
  nameWithType: UnsafeNativeMethods.ApplyWindowBackdrop(nint, WindowBackdropType)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(nint, ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowBackdrop
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 202
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply selected backdrop type for window handle.
  example: []
  syntax:
    content: public static bool ApplyWindowBackdrop(nint handle, WindowBackdropType backgroundType)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Selected window handle.
    - id: backgroundType
      type: ParmaGIS.WPF.UI.Controls.WindowBackdropType
      description: Backdrop type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowBackdrop(handle As IntPtr, backgroundType As WindowBackdropType) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowBackdrop(IntPtr, WindowBackdropType)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr, ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  name.vb: ApplyWindowBackdrop(IntPtr, WindowBackdropType)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  id: IsWindowHasBackdrop(System.IntPtr,ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: IsWindowHasBackdrop(nint, WindowBackdropType)
  nameWithType: UnsafeNativeMethods.IsWindowHasBackdrop(nint, WindowBackdropType)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(nint, ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: IsWindowHasBackdrop
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 237
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to determine whether the provided <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref> has applied legacy backdrop effect.
  example: []
  syntax:
    content: public static bool IsWindowHasBackdrop(nint handle, WindowBackdropType backdropType)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    - id: backdropType
      type: ParmaGIS.WPF.UI.Controls.WindowBackdropType
      description: Background backdrop type.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsWindowHasBackdrop(handle As IntPtr, backdropType As WindowBackdropType) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop*
  nameWithType.vb: UnsafeNativeMethods.IsWindowHasBackdrop(IntPtr, WindowBackdropType)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr, ParmaGIS.WPF.UI.Controls.WindowBackdropType)
  name.vb: IsWindowHasBackdrop(IntPtr, WindowBackdropType)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)
  id: IsWindowHasLegacyMica(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: IsWindowHasLegacyMica(Window?)
  nameWithType: UnsafeNativeMethods.IsWindowHasLegacyMica(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: IsWindowHasLegacyMica
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 260
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to determine whether the provided <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref> has applied legacy Mica effect.
  example: []
  syntax:
    content: public static bool IsWindowHasLegacyMica(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: Window to check.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsWindowHasLegacyMica(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica*
  nameWithType.vb: UnsafeNativeMethods.IsWindowHasLegacyMica(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)
  name.vb: IsWindowHasLegacyMica(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)
  id: IsWindowHasLegacyMica(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: IsWindowHasLegacyMica(nint)
  nameWithType: UnsafeNativeMethods.IsWindowHasLegacyMica(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: IsWindowHasLegacyMica
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 267
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to determine whether the provided handle has applied legacy Mica effect.
  example: []
  syntax:
    content: public static bool IsWindowHasLegacyMica(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsWindowHasLegacyMica(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica*
  nameWithType.vb: UnsafeNativeMethods.IsWindowHasLegacyMica(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)
  name.vb: IsWindowHasLegacyMica(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)
  id: ApplyWindowLegacyMicaEffect(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowLegacyMicaEffect(Window?)
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowLegacyMicaEffect
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 291
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply legacy Mica effect for the selected <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool ApplyWindowLegacyMicaEffect(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: The window to which the effect is to be applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowLegacyMicaEffect(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)
  name.vb: ApplyWindowLegacyMicaEffect(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)
  id: ApplyWindowLegacyMicaEffect(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowLegacyMicaEffect(nint)
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowLegacyMicaEffect
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 299
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply legacy Mica effect for the selected <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool ApplyWindowLegacyMicaEffect(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowLegacyMicaEffect(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)
  name.vb: ApplyWindowLegacyMicaEffect(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)
  id: ApplyWindowLegacyAcrylicEffect(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowLegacyAcrylicEffect(Window?)
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(Window?)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window?)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowLegacyAcrylicEffect
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 319
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply legacy Acrylic effect for the selected <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool ApplyWindowLegacyAcrylicEffect(Window? window)
    parameters:
    - id: window
      type: System.Windows.Window
      description: The window to which the effect is to be applied.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowLegacyAcrylicEffect(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(Window)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)
  name.vb: ApplyWindowLegacyAcrylicEffect(Window)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)
  id: ApplyWindowLegacyAcrylicEffect(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ApplyWindowLegacyAcrylicEffect(nint)
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ApplyWindowLegacyAcrylicEffect
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 327
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to apply legacy Acrylic effect for the selected <xref href="System.Windows.Window" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool ApplyWindowLegacyAcrylicEffect(nint handle)
    parameters:
    - id: handle
      type: System.IntPtr
      description: Window handle
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if invocation of native Windows function succeeds.
    content.vb: Public Shared Function ApplyWindowLegacyAcrylicEffect(handle As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect*
  nameWithType.vb: UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)
  name.vb: ApplyWindowLegacyAcrylicEffect(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor
  id: GetDwmColor
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: GetDwmColor()
  nameWithType: UnsafeNativeMethods.GetDwmColor()
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor()
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: GetDwmColor
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 357
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Tries to get currently selected Window accent color.
  example: []
  syntax:
    content: public static Color GetDwmColor()
    return:
      type: System.Windows.Media.Color
    content.vb: Public Shared Function GetDwmColor() As Color
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor*
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.Windows.Window)
  id: RemoveWindowCaption(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowCaption(Window)
  nameWithType: UnsafeNativeMethods.RemoveWindowCaption(Window)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.Windows.Window)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowCaption
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 460
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  syntax:
    content: public static bool RemoveWindowCaption(Window window)
    parameters:
    - id: window
      type: System.Windows.Window
    return:
      type: System.Boolean
    content.vb: Public Shared Function RemoveWindowCaption(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption*
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.IntPtr)
  id: RemoveWindowCaption(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: RemoveWindowCaption(nint)
  nameWithType: UnsafeNativeMethods.RemoveWindowCaption(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: RemoveWindowCaption
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 472
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  syntax:
    content: public static bool RemoveWindowCaption(nint hWnd)
    parameters:
    - id: hWnd
      type: System.IntPtr
    return:
      type: System.Boolean
    content.vb: Public Shared Function RemoveWindowCaption(hWnd As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption*
  nameWithType.vb: UnsafeNativeMethods.RemoveWindowCaption(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption(System.IntPtr)
  name.vb: RemoveWindowCaption(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.Windows.Window)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.Windows.Window)
  id: ExtendClientAreaIntoTitleBar(System.Windows.Window)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ExtendClientAreaIntoTitleBar(Window)
  nameWithType: UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(Window)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.Windows.Window)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ExtendClientAreaIntoTitleBar
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 500
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  syntax:
    content: public static bool ExtendClientAreaIntoTitleBar(Window window)
    parameters:
    - id: window
      type: System.Windows.Window
    return:
      type: System.Boolean
    content.vb: Public Shared Function ExtendClientAreaIntoTitleBar(window As Window) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar*
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.IntPtr)
  id: ExtendClientAreaIntoTitleBar(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: ExtendClientAreaIntoTitleBar(nint)
  nameWithType: UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: ExtendClientAreaIntoTitleBar
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 512
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  syntax:
    content: public static bool ExtendClientAreaIntoTitleBar(nint hWnd)
    parameters:
    - id: hWnd
      type: System.IntPtr
    return:
      type: System.Boolean
    content.vb: Public Shared Function ExtendClientAreaIntoTitleBar(hWnd As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar*
  nameWithType.vb: UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar(System.IntPtr)
  name.vb: ExtendClientAreaIntoTitleBar(IntPtr)
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled
  id: IsCompositionEnabled
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: IsCompositionEnabled()
  nameWithType: UnsafeNativeMethods.IsCompositionEnabled()
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled()
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: IsCompositionEnabled
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 573
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Checks whether the DWM composition is enabled.
  example: []
  syntax:
    content: public static bool IsCompositionEnabled()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsCompositionEnabled() As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled*
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)
  commentId: M:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)
  id: IsValidWindow(System.IntPtr)
  parent: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods
  langs:
  - csharp
  - vb
  name: IsValidWindow(nint)
  nameWithType: UnsafeNativeMethods.IsValidWindow(nint)
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow(nint)
  type: Method
  source:
    remote:
      path: platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
      branch: origin/test
      repo: https://github.com/ParmaGIS/ParmaGIS.Net.git
    id: IsValidWindow
    path: ../ParmaGIS master/platforms/wpf/src/ParmaGIS.WPF.UI/Interop/UnsafeNativeMethods.cs
    startLine: 583
  assemblies:
  - ParmaGIS.WPF.UI
  namespace: ParmaGIS.WPF.UI.Interop
  summary: Checks if provided pointer represents existing window.
  example: []
  syntax:
    content: public static bool IsValidWindow(nint hWnd)
    parameters:
    - id: hWnd
      type: System.IntPtr
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsValidWindow(hWnd As IntPtr) As Boolean
  overload: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow*
  nameWithType.vb: UnsafeNativeMethods.IsValidWindow(IntPtr)
  fullName.vb: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)
  name.vb: IsValidWindow(IntPtr)
references:
- uid: ParmaGIS.WPF.UI.Interop
  commentId: N:ParmaGIS.WPF.UI.Interop
  href: ParmaGIS.html
  name: ParmaGIS.WPF.UI.Interop
  nameWithType: ParmaGIS.WPF.UI.Interop
  fullName: ParmaGIS.WPF.UI.Interop
  spec.csharp:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.UI
    name: UI
    href: ParmaGIS.WPF.UI.html
  - name: .
  - uid: ParmaGIS.WPF.UI.Interop
    name: Interop
    href: ParmaGIS.WPF.UI.Interop.html
  spec.vb:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.UI
    name: UI
    href: ParmaGIS.WPF.UI.html
  - name: .
  - uid: ParmaGIS.WPF.UI.Interop
    name: Interop
    href: ParmaGIS.WPF.UI.Interop.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Window
  commentId: T:System.Windows.Window
  parent: System.Windows
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.windows.window
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ApplyWindowCornerPreference_System_Windows_Window_ParmaGIS_WPF_UI_Controls_WindowCornerPreference_
  name: ApplyWindowCornerPreference
  nameWithType: UnsafeNativeMethods.ApplyWindowCornerPreference
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference
- uid: ParmaGIS.WPF.UI.Controls.WindowCornerPreference
  commentId: T:ParmaGIS.WPF.UI.Controls.WindowCornerPreference
  parent: ParmaGIS.WPF.UI.Controls
  href: ParmaGIS.WPF.UI.Controls.WindowCornerPreference.html
  name: WindowCornerPreference
  nameWithType: WindowCornerPreference
  fullName: ParmaGIS.WPF.UI.Controls.WindowCornerPreference
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Windows
  commentId: N:System.Windows
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Windows
    name: Windows
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Windows
    name: Windows
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows
- uid: ParmaGIS.WPF.UI.Controls
  commentId: N:ParmaGIS.WPF.UI.Controls
  href: ParmaGIS.html
  name: ParmaGIS.WPF.UI.Controls
  nameWithType: ParmaGIS.WPF.UI.Controls
  fullName: ParmaGIS.WPF.UI.Controls
  spec.csharp:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.UI
    name: UI
    href: ParmaGIS.WPF.UI.html
  - name: .
  - uid: ParmaGIS.WPF.UI.Controls
    name: Controls
    href: ParmaGIS.WPF.UI.Controls.html
  spec.vb:
  - uid: ParmaGIS
    name: ParmaGIS
    href: ParmaGIS.html
  - name: .
  - uid: ParmaGIS.WPF
    name: WPF
    href: ParmaGIS.WPF.html
  - name: .
  - uid: ParmaGIS.WPF.UI
    name: UI
    href: ParmaGIS.WPF.UI.html
  - name: .
  - uid: ParmaGIS.WPF.UI.Controls
    name: Controls
    href: ParmaGIS.WPF.UI.Controls.html
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_RemoveWindowDarkMode_System_Windows_Window_
  name: RemoveWindowDarkMode
  nameWithType: UnsafeNativeMethods.RemoveWindowDarkMode
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowDarkMode
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ApplyWindowDarkMode_System_Windows_Window_
  name: ApplyWindowDarkMode
  nameWithType: UnsafeNativeMethods.ApplyWindowDarkMode
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowDarkMode
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_RemoveWindowTitlebarContents_System_Windows_Window_
  name: RemoveWindowTitlebarContents
  nameWithType: UnsafeNativeMethods.RemoveWindowTitlebarContents
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowTitlebarContents
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ApplyWindowBackdrop_System_IntPtr_ParmaGIS_WPF_UI_Controls_WindowBackdropType_
  name: ApplyWindowBackdrop
  nameWithType: UnsafeNativeMethods.ApplyWindowBackdrop
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowBackdrop
- uid: ParmaGIS.WPF.UI.Controls.WindowBackdropType
  commentId: T:ParmaGIS.WPF.UI.Controls.WindowBackdropType
  parent: ParmaGIS.WPF.UI.Controls
  href: ParmaGIS.WPF.UI.Controls.WindowBackdropType.html
  name: WindowBackdropType
  nameWithType: WindowBackdropType
  fullName: ParmaGIS.WPF.UI.Controls.WindowBackdropType
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_IsWindowHasBackdrop_System_IntPtr_ParmaGIS_WPF_UI_Controls_WindowBackdropType_
  name: IsWindowHasBackdrop
  nameWithType: UnsafeNativeMethods.IsWindowHasBackdrop
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasBackdrop
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_IsWindowHasLegacyMica_System_Windows_Window_
  name: IsWindowHasLegacyMica
  nameWithType: UnsafeNativeMethods.IsWindowHasLegacyMica
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ApplyWindowLegacyMicaEffect_System_Windows_Window_
  name: ApplyWindowLegacyMicaEffect
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyMicaEffect
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ApplyWindowLegacyAcrylicEffect_System_Windows_Window_
  name: ApplyWindowLegacyAcrylicEffect
  nameWithType: UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_GetDwmColor
  name: GetDwmColor
  nameWithType: UnsafeNativeMethods.GetDwmColor
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.GetDwmColor
- uid: System.Windows.Media.Color
  commentId: T:System.Windows.Media.Color
  parent: System.Windows.Media
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.windows.media.color
  name: Color
  nameWithType: Color
  fullName: System.Windows.Media.Color
- uid: System.Windows.Media
  commentId: N:System.Windows.Media
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Windows.Media
  nameWithType: System.Windows.Media
  fullName: System.Windows.Media
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Windows
    name: Windows
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows
  - name: .
  - uid: System.Windows.Media
    name: Media
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows.media
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Windows
    name: Windows
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows
  - name: .
  - uid: System.Windows.Media
    name: Media
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.windows.media
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_RemoveWindowCaption_System_Windows_Window_
  name: RemoveWindowCaption
  nameWithType: UnsafeNativeMethods.RemoveWindowCaption
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.RemoveWindowCaption
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_ExtendClientAreaIntoTitleBar_System_Windows_Window_
  name: ExtendClientAreaIntoTitleBar
  nameWithType: UnsafeNativeMethods.ExtendClientAreaIntoTitleBar
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.ExtendClientAreaIntoTitleBar
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_IsCompositionEnabled
  name: IsCompositionEnabled
  nameWithType: UnsafeNativeMethods.IsCompositionEnabled
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsCompositionEnabled
- uid: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow*
  commentId: Overload:ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow
  href: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.html#ParmaGIS_WPF_UI_Interop_UnsafeNativeMethods_IsValidWindow_System_IntPtr_
  name: IsValidWindow
  nameWithType: UnsafeNativeMethods.IsValidWindow
  fullName: ParmaGIS.WPF.UI.Interop.UnsafeNativeMethods.IsValidWindow
